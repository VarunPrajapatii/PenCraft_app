// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                  String              @id @default(uuid())
  email                   String              @unique
  name                    String
  password                String
  profileImageKey         String?             @default("")
  followersCount          Int                 @default(0)
  followingCount          Int                 @default(0)
  bio                     String              @default("")
  createdAt               DateTime            @default(now())
  blogs                   Blog[]
  totalClaps              Int                 @default(0)
  followers               UserRelation[]      @relation("Followers")
  following               UserRelation[]      @relation("Following")
}

model Blog {
  blogId                  String              @id
  title                   String
  bannerImageKey          String?
  subtitle                String
  content                 Json
  publishedDate           DateTime?
// publishedDate – set to now() when we flip published to true.
// published – starts false, its in draft mode, when we set it to true, publishedDate is set to now().
  published               Boolean             @default(false)
  createdAt               DateTime            @default(now())
  author                  User                @relation(fields: [authorId], references: [userId], onDelete: Cascade)
  authorId                String
  claps                   Int                 @default(0)
}

model UserRelation {
  relationId                      String              @id @default(uuid())
  followerId              String
  followingId             String
  createdAt               DateTime            @default(now())

  follower                User                @relation("Following", fields: [followerId], references: [userId], onDelete: Cascade)
  following               User                @relation("Followers", fields: [followingId], references: [userId], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}